package org.example.bot

import com.github.kotlintelegrambot.Bot
import com.github.kotlintelegrambot.bot
import com.github.kotlintelegrambot.dispatch
import com.github.kotlintelegrambot.dispatcher.*
import com.github.kotlintelegrambot.entities.ChatAction
import com.github.kotlintelegrambot.entities.ChatId
import com.github.kotlintelegrambot.entities.InlineKeyboardMarkup
import com.github.kotlintelegrambot.entities.TelegramFile
import com.github.kotlintelegrambot.entities.keyboard.InlineKeyboardButton
import com.github.kotlintelegrambot.extensions.filters.Filter
import com.github.kotlintelegrambot.logging.LogLevel
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import org.example.bot.session.SessionManager
import org.example.bot.utils.chatId
import org.example.data.remote.repository.WeatherRepository

private const val GIF_WAITING_URL = "https://media.tenor.com/OBEfKgDoCogAAAAC/pulp-fiction-john-travolta.gif"
private const val BOT_ANSWER_TIMEOUT = 30
private const val METRIC = "metric"

class WeatherBot(
    private val weatherRepository: WeatherRepository,
    private val sessionManager: SessionManager,
) {
    private val botToken = System.getenv("BOT_TOKEN") ?: error("BOT_TOKEN env var is missing")
    private val apiKey = System.getenv("API_KEY") ?: error("API_KEY env var is missing")
    fun createBot(): Bot {
        return bot {
            timeout = BOT_ANSWER_TIMEOUT
            token = botToken
            logLevel = LogLevel.Error

            dispatch {
                setupCallbacks()
                setupCommands()
            }
        }
    }
    private fun Dispatcher.setupCallbacks() {
        callbackQuery("getMyLocation") {
            sessionManager.getOrCreateSession(chatId.chatId)
            bot.sendMessage(
                chatId = chatId,
                text = """
                üìç –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é —á–µ—Ä–µ–∑ Telegram.
                
                –ù–∞–∂–º–∏ –Ω–∞ üìé (–∏–ª–∏ ‚ûï –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞) ‚Üí ¬´–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ¬ª ‚Üí ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å¬ª.
            """.trimIndent(),
            )
        }
            location {
                val currentChatId = ChatId.fromId(message.chat.id)
                val userId = message.chat.id
                val latitude = location.latitude.toString()
                val longitude = location.longitude.toString()
                println("–ü–æ–ª—É—á–µ–Ω–∞ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—è: lat=$latitude, lon=$longitude")

                CoroutineScope(Dispatchers.IO).launch {

//                    val country = weatherRepository.getReverseGeocodingCountryName(
//                        latitude,
//                        longitude,
//                        "json",
//                    ).address.city
//                    sessionManager.getOrCreateSession(userId).country = country
//                    bot.sendMessage(
//                        chatId = currentChatId,
//                        text = "–¢–≤–æ–π –≥–æ—Ä–æ–¥: ${country}, –≤–µ—Ä–Ω–æ?\n–ï—Å–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ, —Å–∫–∏–Ω—å –ª–æ–∫–∞—Ü–∏—é –µ—â–µ —Ä–∞–∑",
//                        replyMarkup = InlineKeyboardMarkup.create(
//                            listOf(InlineKeyboardButton.CallbackData("–î–∞, –≤–µ—Ä–Ω–æ", "yes_label"))
//                        )
//                    )
                    try {
                        val response = weatherRepository.getReverseGeocodingCountryName(
                            latitude,
                            longitude,
                            "jsonv"
                        )

                        val country = response.address.state
                            ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

                        sessionManager.getOrCreateSession(userId).country = country

                        val keyboard = InlineKeyboardMarkup.create(
                            listOf(
                                InlineKeyboardButton.CallbackData("–î–∞, –≤–µ—Ä–Ω–æ", "yes_label")
                            )
                        )

                        bot.sendMessage(
                            chatId = currentChatId,
                            text = "–¢–≤–æ–π –≥–æ—Ä–æ–¥: $country. –í–µ—Ä–Ω–æ?\n–ï—Å–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ ‚Äî –æ—Ç–ø—Ä–∞–≤—å –ª–æ–∫–∞—Ü–∏—é –µ—â—ë —Ä–∞–∑",
                            replyMarkup = keyboard
                        )
                    } catch (e: Exception) {
                        println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º: ${e.message}")
                        bot.sendMessage(
                            chatId = currentChatId,
                            text = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é."
                        )
                    }
                }
            }


        callbackQuery("enterManually") {
            sessionManager.getOrCreateSession(chatId.chatId)
            bot.sendMessage(
                chatId = chatId,
                text = "–í–≤–µ–¥–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é",
            )
            message(Filter.Text) {
                val session = sessionManager.getOrCreateSession(chatId.chatId)
                session.country = message.text.orEmpty()
                bot.sendMessage(
                    chatId = chatId,
                    text = "–¢–≤–æ–π –≥–æ—Ä–æ–¥: ${session.country}, –≤–µ—Ä–Ω–æ?\n–ï—Å–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ, –≤–≤–µ–¥–∏ –≥–æ—Ä–æ–¥ –µ—â–µ —Ä–∞–∑",
                    replyMarkup = InlineKeyboardMarkup.create(
                        listOf(InlineKeyboardButton.CallbackData("–î–∞, –≤–µ—Ä–Ω–æ", "yes_label"))
                    )
                )
            }
        }

        callbackQuery("yes_label") {
            val session = sessionManager.getOrCreateSession(chatId.chatId)
            bot.apply {
                sendAnimation(
                    chatId = chatId,
                    animation = TelegramFile.ByUrl(GIF_WAITING_URL)
                )
                sendMessage(
                    chatId = chatId,
                    text = "–£–∑–Ω–∞–µ–º –≤–∞—à—É –ø–æ–≥–æ–¥—É...",
                )
                sendChatAction(chatId = chatId, action = ChatAction.TYPING)
            }

            CoroutineScope(Dispatchers.IO).launch {
                val currentWeather = weatherRepository.getCurrentWeather(
                    session.country,
                    System.getenv("API_KEY"),
                    METRIC
                )
                bot.sendMessage(
                    chatId = chatId,
                    text = """
                            üå§ –°–µ–π—á–∞—Å –≤ ${session.country}:
                             ‚òÅ –û–±–ª–∞—á–Ω–æ—Å—Ç—å: ${currentWeather.clouds.all}%
                            üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (–≥—Ä–∞–¥—É—Å—ã): ${currentWeather.main.temp}¬∞C
                            üôé ‚Äç–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: ${currentWeather.main.feels_like}¬∞C
                            üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: ${currentWeather.main.humidity}%
                            üå™ –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: ${currentWeather.wind.speed}–º/—Å
                            üß≠ –î–∞–≤–ª–µ–Ω–∏–µ: ${(currentWeather.main.pressure)*0.75} –º–º —Ä—Ç. —Å—Ç.
                    """.trimIndent()
                )

                bot.sendMessage(
                    chatId = chatId,
                    text = "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –¥—Ä—É–≥–æ–º –≥–æ—Ä–æ–¥–µ –∏–ª–∏ –µ—â–µ —Ä–∞–∑, –≤–≤–µ–¥–∏—Ç–µ /weather"
                )
                sessionManager.clearSession(chatId.chatId)
            }
        }
    }
        private fun Dispatcher.setupCommands() {
            command("start") {
                sessionManager.getOrCreateSession(chatId.chatId)
                bot.sendMessage(
                    chatId = chatId,
                    text = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–≥–æ–¥—É –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ!\n–î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ /weather",
                )
            }
            command("weather") {
                sessionManager.getOrCreateSession(chatId.chatId)
                val inlineKeyboardMarkup = InlineKeyboardMarkup.create(
                    listOf(
                        InlineKeyboardButton.CallbackData(
                            text = "–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–æ–π –≥–æ—Ä–æ–¥ –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏(–¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤)",
                            callbackData = "getMyLocation",
                        )
                    ),
                    listOf(
                        InlineKeyboardButton.CallbackData(
                            text = "–í–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é",
                            callbackData = "enterManually",
                        )
                    )
                )

                bot.sendMessage(
                    chatId = chatId,
                    text = "–ú–Ω–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å —Ç–≤–æ–π –≥–æ—Ä–æ–¥!",
                    replyMarkup = inlineKeyboardMarkup,
                )
            }
        }

}
